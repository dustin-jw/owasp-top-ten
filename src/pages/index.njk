---
title: OWASP Top Ten Overview
description: What are the most critical security risks that developers need to be aware of and prepared to mitigate? The Open Web Application Security Project (OWASP) tracks the most common threats and releases a Top 10 list of security risks to be aware of.
layout: layout.njk
---

<div class="cmp-slide">
  <div class="cmp-stack">
    <h1>
      OWASP Top Ten
    </h1>
    <p>
      <a href="https://owasp.org/www-project-top-ten/">
        The Top 10 Web Application Security Risks (as of 2021)
      </a>
    </p>
  </div>
</div>

<div class="cmp-slide">
  <div class="cmp-stack">
    <h2>
      What is the OWASP Top Ten?
    </h2>
    <p>
      OWASP Stands for Open Web Application Security Project
    </p>
    <p>
      To raise awareness of security risks, they publish a top 10 list of the most critical risks that web applications face.
    </p>
  </div>
</div>

<div class="cmp-slide">
  <div class="cmp-stack">
    <h2>
      Security threats change over time
    </h2>
    <figure>
      <img src="/assets/images/updated-top-10.png" alt="The OWASP Top 10 list was updated in 2021, adding three new items and reprioritizing some of the existing riks.">
      <figcaption>
        As risks change and developers take action to combat them, OWASP will update the list to reflect the new reality.
      </figcaption>
    </figure>
  </div>
</div>

<div class="cmp-slide">
  <div class="cmp-stack">
    <h2>
      The List (as of 2021)
    </h2>
    <ol>
      <li>
        <a href="https://owasp.org/Top10/A01_2021-Broken_Access_Control/">
          Broken Access Control
        </a>
      </li>
      <li>
        <a href="https://owasp.org/Top10/A02_2021-Cryptographic_Failures/">
          Cryptographic Failures
        </a>
      </li>
      <li>
        <a href="https://owasp.org/Top10/A03_2021-Injection/">
          Injection
        </a>
      </li>
      <li>
        <a href="https://owasp.org/Top10/A04_2021-Insecure_Design/">
          Insecure Design
        </a>
      </li>
      <li>
        <a href="https://owasp.org/Top10/A05_2021-Security_Misconfiguration/">
          Security Misconfiguration
        </a>
      </li>
      <li>
        <a href="https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/">
          Vulnerable and Outdated Components
        </a>
      </li>
      <li>
        <a href="https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/">
          Identification and Authentication Failures
        </a>
      </li>
      <li>
        <a href="https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/">
          Software and Data Integrity Failures
        </a>
      </li>
      <li>
        <a href="https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/">
          Security Logging and Monitoring Failures
        </a>
      </li>
      <li>
        <a href="https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/">
          Server-Side Request Forgery (SSRF)
        </a>
      </li>
    </ol>
  </div>
</div>

<div class="cmp-slide">
  <div class="cmp-stack">
    <h2>
      1. Broken Access Control
    </h2>
    <p>
      Access control prevents users from acting outside of their intended
      permissions. Broken access control can lead to:
    </p>
    <ul>
      <li>
        Exposure of sensitive information
      </li>
      <li>
        Modification or destruction of data
      </li>
      <li>
        Users exceeding their priveleges to perform restricted actions
      </li>
    </ul>
  </div>
</div>

<div class="cmp-slide">
  <div class="cmp-stack">
    <h3>
      Broken Access Control Vulnerabilities
    </h3>
    <ul>
      <li>
        Access intended to only be granted for certain roles or users is
        available to everyone
      </li>
      <li>
        URL tampering, modifying application state, or modifying API requests
      </li>
      <li>
        Providing unique identifiers that enable viewing/editing someone else's
        account
      </li>
      <li>
        Missing access controls for POST, PUT, and DELETE methods
      </li>
      <li>
        Elevation of privelege: not logged in acting as user acting as admin
      </li>
      <li>
        Tampering with cookies or a JSON Web Token (JWT) to elevate privelege
      </li>
      <li>
        CORS misconfiguration allowing access from untrusted origins
      </li>
      <li>
        Force browsing to access authenticated or priveleged pages
      </li>
    </ul>
  </div>
</div>
