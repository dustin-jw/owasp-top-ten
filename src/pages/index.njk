---
title: OWASP Top Ten Overview
description: What are the most critical security risks that developers need to be aware of and prepared to mitigate? The Open Web Application Security Project (OWASP) tracks the most common threats and releases a Top 10 list of security risks to be aware of.
layout: layout.njk
---

<div class="cmp-slide">
  <div class="cmp-stack">
    <h1>
      OWASP Top Ten
    </h1>
  </div>
</div>

<div class="cmp-slide">
  <div class="cmp-stack">
    <h2>
      What is the OWASP Top Ten?
    </h2>
    <p>
      OWASP Stands for Open Web Application Security Project
    </p>
    <p>
      To raise awareness of security risks, they publish a top 10 list of the most critical risks that web applications face.
    </p>
    <p>
      <a href="https://owasp.org/www-project-top-ten/">
        The Top 10 Web Application Security Risks (as of 2021)
      </a>
    </p>
  </div>
</div>

<div class="cmp-slide">
  <div class="cmp-stack">
    <h2>
      Security threats change over time
    </h2>
    <figure>
      <img src="/assets/images/updated-top-10.png" alt="The OWASP Top 10 list was updated in 2021, adding three new items and reprioritizing some of the existing riks.">
      <figcaption>
        As risks change and developers take action to combat them, OWASP will update the list to reflect the new reality.
      </figcaption>
    </figure>
  </div>
</div>

<div class="cmp-slide">
  <div class="cmp-stack">
    <h2>
      The List (as of 2021)
    </h2>
    <ol>
      <li>
        <a href="https://owasp.org/Top10/A01_2021-Broken_Access_Control/">
          Broken Access Control
        </a>
      </li>
      <li>
        <a href="https://owasp.org/Top10/A02_2021-Cryptographic_Failures/">
          Cryptographic Failures
        </a>
      </li>
      <li>
        <a href="https://owasp.org/Top10/A03_2021-Injection/">
          Injection
        </a>
      </li>
      <li>
        <a href="https://owasp.org/Top10/A04_2021-Insecure_Design/">
          Insecure Design
        </a>
      </li>
      <li>
        <a href="https://owasp.org/Top10/A05_2021-Security_Misconfiguration/">
          Security Misconfiguration
        </a>
      </li>
      <li>
        <a href="https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/">
          Vulnerable and Outdated Components
        </a>
      </li>
      <li>
        <a href="https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/">
          Identification and Authentication Failures
        </a>
      </li>
      <li>
        <a href="https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/">
          Software and Data Integrity Failures
        </a>
      </li>
      <li>
        <a href="https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/">
          Security Logging and Monitoring Failures
        </a>
      </li>
      <li>
        <a href="https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/">
          Server-Side Request Forgery (SSRF)
        </a>
      </li>
    </ol>
  </div>
</div>

{# <div class="cmp-slide">
  <div class="cmp-stack">
    <h2>
      2. Cryptographic Failures
    </h2>
    <p>
      This has to with sensitive information like passwords, credit card
      numbers, health records, and other secrets. These need to be protected
      both while in transit (by using HTTPS, for example) and while at rest (by
      encrypting data).
    </p>
    <p>
      Failures often have to do with unencrypted data (like plain-text
      passwords), weak algorithms or cryptographic functions, or storing
      sensitive data unnecessarily.
    </p>
    <p>
      <a href="https://owasp.org/Top10/A02_2021-Cryptographic_Failures/#example-attack-scenarios">
        Example Attack Scenarios
      </a>
    </p>
  </div>
</div> #}

<div class="cmp-slide">
  <h2>
    1. Broken Access Control
  </h2>
</div>

<div class="cmp-slide">
  <div class="cmp-stack">
    <h3>
      Broken Access Control
      <span class="util-visually-hidden">
        Definition
      </span>
    </h3>
    <p>
      Broken Access Control allows users to act outside of their intended
      priveleges. For example, a typical user being able to access admin pages
      or features.
    </p>
    <p>
      This can lead to:
    </p>
    <ul>
      <li>
        Exposure of sensitive information
      </li>
      <li>
        Modification or destruction of data
      </li>
      <li>
        Users exceeding their priveleges to perform restricted actions
      </li>
    </ul>
  </div>
</div>

<div class="cmp-slide">
  <div class="cmp-stack">
    <h3>
      Broken Access Control
      <span class="util-visually-hidden">
        Example
      </span>
    </h3>
    <p>
      A user goes to their account page at <code class="language-none">/account?id=576</code> and the
      backend looks something like:
    </p>
    <pre><code class="language-js">app.get('/account', (req, res) => {
  const info = getAccountInfo(req.params.id);
  res.send(info);
});</code></pre>
    <p>
      What could go wrong?
    </p>
  </div>
</div>

<div class="cmp-slide">
  <div class="cmp-stack">
    <h3>
      Broken Access Control Vulnerabilities
    </h3>
    <ul>
      <li>
        Tampering with URLs, cookies, JWTs, or application state to gain access
        to restricted resources
      </li>
      <li>
        Missing access controls for API methods, CORS misconfiguration, or not
        following the principle of least privelege (deny by default)
      </li>
      <li>
        Elevation of privelege. Acting as a user without logging in, or a user
        acting as admin
      </li>
    </ul>
  </div>
</div>

<div class="cmp-slide">
  <div class="cmp-stack">
    <h3>
      Broken Access Control Prevention
    </h3>
    <ul>
      <li>
        Deny by default, enforce record ownership, invalidate sessions after
        logout, and rate limit APIs
      </li>
      <li>
        Implement access control mechanisms once, then re-use throughout the
        application (minimizing surface area for bugs)
      </li>
      <li>
        Log access control failures and alert admins after repeated failures
      </li>
    </ul>
  </div>
</div>

<div class="cmp-slide">
  <h2>
    2. Cryptographic Failures
  </h2>
</div>

<div class="cmp-slide">
  <h2>
    3. Injection
  </h2>
</div>

<div class="cmp-slide">
  <h2>
    4. Insecure Design
  </h2>
</div>

<div class="cmp-slide">
  <h2>
    5. Security Misconfiguration
  </h2>
</div>

<div class="cmp-slide">
  <h2>
    6. Vulnerable and Outdated Components
  </h2>
</div>

<div class="cmp-slide">
  <h2>
    7. Identification and Authentication Failures
  </h2>
</div>

<div class="cmp-slide">
  <h2>
    8. Software and Data Integrity Failures
  </h2>
</div>

<div class="cmp-slide">
  <h2>
    9. Security Logging and Monitoring Failures
  </h2>
</div>

<div class="cmp-slide">
  <h2>
    10. Server-Side Request Forgery (SSRF)
  </h2>
</div>
