---
title: OWASP Top Ten Overview
description: What are the most critical security risks that developers need to be aware of and prepared to mitigate? The Open Web Application Security Project (OWASP) tracks the most common threats and releases a Top 10 list of security risks to be aware of.
layout: layout.njk
---

<div class="cmp-slide">
  <div class="cmp-stack">
    <h1>
      OWASP Top Ten
    </h1>
  </div>
</div>

<div class="cmp-slide">
  <div class="cmp-stack">
    <h2>
      What is the OWASP Top Ten?
    </h2>
    <p>
      OWASP Stands for Open Web Application Security Project
    </p>
    <p>
      To raise awareness of security risks, they publish a top 10 list of the most critical risks that web applications face.
    </p>
    <p>
      <a href="https://owasp.org/www-project-top-ten/">
        The Top 10 Web Application Security Risks (as of 2021)
      </a>
    </p>
  </div>
</div>

<div class="cmp-slide">
  <div class="cmp-stack">
    <h2>
      Security threats change over time
    </h2>
    <figure>
      <img src="/assets/images/updated-top-10.png" alt="The OWASP Top 10 list was updated in 2021, adding three new items and reprioritizing some of the existing riks.">
      <figcaption>
        As risks change and developers take action to combat them, OWASP will update the list to reflect the new reality.
      </figcaption>
    </figure>
  </div>
</div>

<div class="cmp-slide">
  <div class="cmp-stack">
    <h2>
      The List (as of 2021)
    </h2>
    <ol>
      <li>
        <a href="https://owasp.org/Top10/A01_2021-Broken_Access_Control/">
          Broken Access Control
        </a>
      </li>
      <li>
        <a href="https://owasp.org/Top10/A02_2021-Cryptographic_Failures/">
          Cryptographic Failures
        </a>
      </li>
      <li>
        <a href="https://owasp.org/Top10/A03_2021-Injection/">
          Injection
        </a>
      </li>
      <li>
        <a href="https://owasp.org/Top10/A04_2021-Insecure_Design/">
          Insecure Design
        </a>
      </li>
      <li>
        <a href="https://owasp.org/Top10/A05_2021-Security_Misconfiguration/">
          Security Misconfiguration
        </a>
      </li>
      <li>
        <a href="https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/">
          Vulnerable and Outdated Components
        </a>
      </li>
      <li>
        <a href="https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/">
          Identification and Authentication Failures
        </a>
      </li>
      <li>
        <a href="https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/">
          Software and Data Integrity Failures
        </a>
      </li>
      <li>
        <a href="https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/">
          Security Logging and Monitoring Failures
        </a>
      </li>
      <li>
        <a href="https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/">
          Server-Side Request Forgery (SSRF)
        </a>
      </li>
    </ol>
  </div>
</div>

<div class="cmp-slide">
  <h2>
    1. Broken Access Control
  </h2>
</div>

<div class="cmp-slide">
  <div class="cmp-stack">
    <h3>
      Broken Access Control
      <span class="util-visually-hidden">
        Definition
      </span>
    </h3>
    <p>
      Broken Access Control allows users to act outside of their intended
      priveleges. For example, a typical user being able to access admin pages
      or features.
    </p>
    <p>
      This can lead to:
    </p>
    <ul>
      <li>
        Exposure of sensitive information
      </li>
      <li>
        Modification or destruction of data
      </li>
      <li>
        Users exceeding their priveleges to perform restricted actions
      </li>
    </ul>
  </div>
</div>

<div class="cmp-slide">
  <div class="cmp-stack">
    <h3>
      Broken Access Control
      <span class="util-visually-hidden">
        Example
      </span>
    </h3>
    <p>
      A user goes to their account page at <code class="language-none">/account?id=576</code> and the
      backend looks something like:
    </p>
    <pre><code class="language-js">app.get('/account', (req, res) => {
  const info = getAccountInfo(req.params.id);
  res.send(info);
});</code></pre>
    <p>
      What could go wrong?
    </p>
  </div>
</div>

<div class="cmp-slide">
  <div class="cmp-stack">
    <h3>
      Broken Access Control Vulnerabilities
    </h3>
    <ul>
      <li>
        Tampering with URLs, cookies, JWTs, or application state to gain access
        to restricted resources
      </li>
      <li>
        Missing access controls for API methods, CORS misconfiguration, or not
        following the principle of least privelege (deny by default)
      </li>
      <li>
        Elevation of privelege. Acting as a user without logging in, or a user
        acting as admin
      </li>
    </ul>
  </div>
</div>

<div class="cmp-slide">
  <div class="cmp-stack">
    <h3>
      Broken Access Control Prevention
    </h3>
    <ul>
      <li>
        Deny by default, enforce record ownership, invalidate sessions after
        logout, and rate limit APIs
      </li>
      <li>
        Implement access control mechanisms once, then re-use throughout the
        application (minimizing surface area for bugs)
      </li>
      <li>
        Log access control failures and alert admins after repeated failures
      </li>
    </ul>
  </div>
</div>

<div class="cmp-slide">
  <h2>
    2. Cryptographic Failures
  </h2>
</div>

<div class="cmp-slide">
  <div class="cmp-stack">
    <h3>
      Cryptographic Failures
      <span class="util-visually-hidden">
        Definition
      </span>
    </h3>
    <p>
      A cryptographic failure can be the result of missing or poorly implemented
      data encryption, or the failure to use secure protocols.
    </p>
    <p>
      Sensitive data needs to be protected both while in transit and while at
      rest. What is considered sensitive data is often determined by privacy
      laws or regulations, but these are some common examples:
    </p>
    <ul>
      <li>
        Passwords
      </li>
      <li>
        Credit card numbers
      </li>
      <li>
        Health records and personal information
      </li>
    </ul>
  </div>
</div>

<div class="cmp-slide">
  <div class="cmp-stack">
    <h3>
      Protecting Data in Transit
    </h3>
    <ul>
      <li>
        Encrypt all data in transit with secure protocols such as TLS (using
        HTTPS instead of HTTP, for example)
      </li>
      <li>
        Do not transport sensitive data over FTP or SMTP
      </li>
      <li>
        Avoid transmitting data in clear text
      </li>
    </ul>
  </div>
</div>

<div class="cmp-slide">
  <div class="cmp-stack">
    <h3>
      Protecting Data at Rest
    </h3>
    <ul>
      <li>
        Do not store sensitive data unnecessarily, but encrypt the data that
        does need to be stored
      </li>
      <li>
        Do not use weak or old cryptographic algorithms or protocols or
        deprecated hash functions (MD5 or SHA1, for example)
      </li>
      <li>
        Practice proper key management and ensure that they are generated
        cryptographically randomly
      </li>
    </ul>
  </div>
</div>

<div class="cmp-slide">
  <h2>
    3. Injection
  </h2>
</div>

<div class="cmp-slide">
  <div class="cmp-stack">
    <h3>
      Injection
      <span class="util-visually-hidden">
        Definition
      </span>
    </h3>
    <p>
      Injection can refer to Cross-site Scripting (XSS), SQL Injection, or other
      situations where user-supplied data is not validated, filtered, or
      sanitized.
    </p>
  </div>
</div>

<div class="cmp-slide">
  <div class="cmp-stack">
    <h3>
      Injection
      <span class="util-visually-hidden">
        Example 1
      </span>
    </h3>
    <figure>
      <img src="https://imgs.xkcd.com/comics/exploits_of_a_mom.png" alt="">
      <figcaption>
        <a href="https://xkcd.com/327/">xkcd: Exploits of a Mom</a>
      </figcaption>
    </figure>
  </div>
</div>

<div class="cmp-slide">
  <div class="cmp-stack">
    <h3>
      Injection
      <span class="util-visually-hidden">
        Example 2
      </span>
    </h3>
    <p>
      Here we have a vulnerable query that uses untrusted data.
    </p>
    <pre class="language-js"><code class="language-js">const query = `
  SELECT *
  FROM accounts
  WHERE custID='${req.params.id}'";
`;
</code></pre>
    <p>
      An attacker can exploit this vulnerability to return all records by using
      <br>
      <code class="language-js">id=' or '1'='1</code>.
    </p>
    <p>
      The query effectively becomes:
    </p>
    <pre class="language-js"><code class="language-js">const query = `
  SELECT *
  FROM accounts
  WHERE custID='' or '1'='1'";
`;
</code></pre>
  </div>
</div>

<div class="cmp-slide">
  <div class="cmp-stack">
    <h3>
      Injection Prevention
    </h3>
    <ul>
      <li>
        Use safe APIs with parameterized interfaces (rather than constructing
        SQL manually, for example)
      </li>
      <li>
        Define valid patterns that user input can fit into, and validate
        user-supplied data
      </li>
      <li>
        Use LIMIT to prevent returning all records in the event of successful
        injection
      </li>
      <li>
        Escape special characters
      </li>
    </ul>
  </div>
</div>

<div class="cmp-slide">
  <h2>
    4. Insecure Design
  </h2>
</div>

<div class="cmp-slide">
  <div class="cmp-stack">
    <h3>
      Insecure Design
      <span class="util-visually-hidden">
        Definition
      </span>
    </h3>
    <p>
      This is a broad category that covers risks related to design and
      architectural flaws. The other items in the Top 10 would be considered
      "insecure implementation", whereas this can apply to the design of a
      system before any code is even written.
    </p>
    <p>
      The lack of risk profiling can lead to these design problems, as threats
      are not considered early enough to effectively prevent them.
    </p>
    <p>
      Threat modeling should be a regular part of the development lifecycle, and
      any risks should be considered and included in user stories and reviewed
      in PRs.
    </p>
  </div>
</div>

<div class="cmp-slide">
  <h2>
    5. Security Misconfiguration
  </h2>
</div>

<div class="cmp-slide">
  <div class="cmp-stack">
    <h3>
      Security Misconfiguration Vulnerabilities
    </h3>
    <p>
      An application might be vulnerable if:
    </p>
    <ul>
      <li>
        Unnecessary features are enabled or installed
      </li>
      <li>
        Default accounts and passwords are enabled and unchanged
      </li>
      <li>
        Detailed stack traces or error messages are visible to users
      </li>
      <li>
        The software is out of date or vulnerable, or security settings in
        updated versions are disabled
      </li>
    </ul>
  </div>
</div>

<div class="cmp-slide">
  <div class="cmp-stack">
    <h3>
      Security Misconfiguration Prevention
    </h3>
    <ul>
      <li>
        Development, QA, and Production environments should all be configured
        identically, but use different credentials
      </li>
      <li>
        Remove or do not install unused features and frameworks
      </li>
      <li>
        Regularly review configurations and permissions, especially when
        applying patches
      </li>
      <li>
        Automate configuration as much as possible to minimize manual errors
      </li>
    </ul>
  </div>
</div>

<div class="cmp-slide">
  <h2>
    6. Vulnerable and Outdated Components
  </h2>
</div>

<div class="cmp-slide">
  <div class="cmp-stack">
    <h3>
      <span class="util-visually-hidden">
        Signifiers of
      </span>
      Vulnerable and Outdated Components
    </h3>
    <p>
      An application is likely vulnerable if:
    </p>
    <ul>
      <li>
        Software is vulnerable, unsupported, or out of date
      </li>
      <li>
        There is no regular process to scan for vulnerabilities or to be alerted
        to security advisories
      </li>
      <li>
        Dependencies are not fixed or updated in a timely fashion (for example,
        updating on a monthly basis rather than when security updates are
        released)
      </li>
      <li>
        Updated, upgraded, or patched libraries are not tested for compatibility
      </li>
    </ul>
  </div>
</div>

<div class="cmp-slide">
  <div class="cmp-stack">
    <h3>
      Preventing Vulnerable and Outdated Components
    </h3>
    <p>
      There should be a patch management process in place.
    </p>
    <ul>
      <li>
        Remove unused dependencies
      </li>
      <li>
        Continuously inventory components and their dependencies using automated
        tools (such as Dependabot for npm updates)
      </li>
      <li>
        Only obtain components from official sources over secure links
      </li>
      <li>
        Monitor for unmaintained libraries or dependencies, including ones that
        do not patch older versions
      </li>
    </ul>
  </div>
</div>

<div class="cmp-slide">
  <h2>
    7. Identification and Authentication Failures
  </h2>
</div>

<div class="cmp-slide">
  <div class="cmp-stack">
    <h3>
      <span class="util-visually-hidden">
        Vulnerabilities related to
      </span>
      Identification and Authentication Failures
    </h3>
    <p>
      Authentication weaknesses make it easier for attackers to gain access to
      user accounts. Applications may be vulnerable to authenication-related
      attacks if:
    </p>
    <ul>
      <li>
        There is no protection against automated attacks, including when the
        attacker has valid usernames/passwords
      </li>
      <li>
        Weak, default, or well-known passwords are allowed ("Password1")
      </li>
      <li>
        Weak or ineffective account recovery methods are used, such as
        knowledge-based security questions
      </li>
      <li>
        Multi-factor authentication is missing or ineffective
      </li>
      <li>
        Session identifiers are exposed in the URL, reused after a successful
        login, or incorrectly invalidated after logou
      </li>
    </ul>
  </div>
</div>

<div class="cmp-slide">
  <div class="cmp-stack">
    <h3>
      Preventing Identification and Authentication Failures
    </h3>
    <ul>
      <li>
        Implement multi-factor authentication to prevent automated attacks from
        succeeding
      </li>
      <li>
        Change default credentials, especially for admin users
      </li>
      <li>
        Check for weak passwords and disallow them when users create accounts or
        change their passwords (<a href="https://github.com/OWASP/passfault/blob/master/wordlists/wordlists/10k-worst-passwords.txt">10,000 worst passwords</a>)
      </li>
      <li>
        Follow the <a href="https://pages.nist.gov/800-63-3/sp800-63b.html#-5112-memorized-secret-verifiers">National Institute of Standards and Technology (NIST) guidelines</a>
        for password length, complexity, and rotation
      </li>
      <li>
        Limit or delay failed login attempts, and alert admins when brute force
        or other attacks are detected
      </li>
    </ul>
  </div>
</div>

<div class="cmp-slide">
  <h2>
    8. Software and Data Integrity Failures
  </h2>
</div>

<div class="cmp-slide">
  <div class="cmp-stack">
    <h3>
      <span class="util-visually-hidden">
        An example of
      </span>
      Software and Data Integrity Failures
    </h3>
    <p>
      These failures relate to a lack of protection against integrity violations
      in code and infrastructure. Insecure CI/CD pipelines with auto-update
      functionality can make this worse.
    </p>
    <p>
      A high profile example of this happened in January 2022, when the author
      of the widely used <code class="language-js">colors.js</code> and
      <code class="language-js">faker.js</code> npm packages sabotaged his own
      repositories, potentially impacting millions of projects downstream.
    </p>
  </div>
</div>

<div class="cmp-slide">
  <div class="cmp-stack">
    <h3>
      <span class="util-visually-hidden">
        Preventing
      </span>
      Software and Data Integrity Failures
    </h3>
    <ul>
      <li>
        Verify that software is from the correct source and has not been altered
      </li>
      <li>
        Use libraries from trusted repositories, and use security tools to
        verify they do not contain known vulnerabilities
      </li>
      <li>
        Use a review process for code and configuration changes to minimize the
        risk of malicious code being merged
      </li>
    </ul>
  </div>
</div>

<div class="cmp-slide">
  <h2>
    9. Security Logging and Monitoring Failures
  </h2>
</div>

<div class="cmp-slide">
  <div class="cmp-stack">
    <h3>
      <span class="util-visually-hidden">
        Types of
      </span>
      Security Logging and Monitoring Failures
    </h3>
    <p>
      If you aren't aware of a breach, you can't respond to it. Logging,
      detection, monitoring, and active responses are likely insufficient if:
    </p>
    <ul>
      <li>
        Auditable events such as logins, failed logins, and high-value
        transactions, are not logged
      </li>
      <li>
        Warnings and errors don't log messages, or they generate unclear or
        inadequate messages.
      </li>
      <li>
        Logs are not monitored for suspicious activity
      </li>
      <li>
        Logs are only stored locally
      </li>
      <li>
        Alerting thresholds and response escalation processes are not in place
        or effective
      </li>
      <li>
        Penetration tests and scans to not trigger alerts
      </li>
      <li>
        The application cannot detect, escalate, or alert for attacks in or near
        real-time
      </li>
    </ul>
  </div>
</div>

<div class="cmp-slide">
  <div class="cmp-stack">
    <h3>
      Preventing Security Logging and Monitoring Failures
    </h3>
    <ul>
      <li>
        Ensure login, access conrol, and server-side input validation failures
        are logged with enough context to identify suspicious/malicious
        accounts, and held long enough to do forensic analysis
      </li>
      <li>
        Ensure logs are generated in a format that log management tools can
        consume, and that they are encoded correctly to prevent injections or
        attacks
      </li>
      <li>
        Ensure high-value transactions have an audit trail with integrity
        controls to prevent tampering or deletion (append-only database tables)
      </li>
      <li>
        Set up effective monitoring and alerting such that suspicious activity
        is detected quickly
      </li>
      <li>
        Establish or adopt an incident response and recovery plan
      </li>
    </ul>
  </div>
</div>

<div class="cmp-slide">
  <h2>
    10. Server-Side Request Forgery (SSRF)
  </h2>
</div>

<div class="cmp-slide">
  <div class="cmp-stack">
    <h3>
      SSRF
      <span class="util-visually-hidden">
        Definition
      </span>
    </h3>
    <p>
      SSRF flaws occur when applications fetch remote resources without
      validating user-supplied URLs. These attacks can often bypass security
      measures such as firewalls, VPNs, or access control lists.
    </p>
    <p>
      This can allow attackers to scan internal servers for open ports, access
      sensitive data either from files or localhost ports, or perform Remote
      Code Execution or Denial of Service attacks.
    </p>
  </div>
</div>

<div class="cmp-slide">
  <div class="cmp-stack">
    <h3>
      SSRF Prevention
    </h3>
    <ul>
      <li>
        Segment remote resource access to reduce impact of SSRF
      </li>
      <li>
        Deny by default to block all but essential network traffic
      </li>
      <li>
        Sanitize and validate all client-supplied input data
      </li>
      <li>
        Use a positive allow list for the URL schema, port, and destination
      </li>
      <li>
        Do not send raw responses to clients and disable HTTP redirects
      </li>
    </ul>
  </div>
</div>
